---
- name: Playbook di Test 
  hosts: linux
  # hosts: localhost
  gather_facts: False
  #vars_files:
  #  - vcenter_vars.yml
  vars:
    # ansible_python_interpreter: "/usr/bin/env python3"
    # vcenter_server: "10.4.9.130"
    # vcenter_user: "virtosadmin"
    # vcenter_pass: "Password10"
    # vcenter_datacenter: "FARM-AREA3"
    # template_name: "RH76-master"
    # bkp_template_name: "RH76-master-bkp"
    # vm_on_name: "RC-RH76"
    # cluster_name: "CLUSTER AREA3"
    # vmname_list: /root/ansible/vmware/vmlist
  tasks:

    # - name: Authenticating against the Vcenter
    #   uri:
    #     url: "https://{{ vcenter_server }}/rest/com/vmware/cis/session"
    #     validate_certs: no
    #     method: POST
    #     user: "{{ vcenter_user }}"
    #     password: "{{ vcenter_pass }}"
    #     force_basic_auth: yes
    #     return_content: yes
    #     status_code: 200
    #   register: ses

    # - name: Get Datacenter Name by rest API
    #   uri:
    #     url: "https://{{ vcenter_server }}/rest/vcenter/datacenter"
    #     validate_certs: no
    #     method: GET
    #     return_content: yes
    #     status_code: 200
    #     headers:
    #       Cookie: "{{ ses.set_cookie }}"
    #   register: datacenter

    # - set_fact:
    #     vcenter_datacenter: "{{ datacenter.json.value[0].name }}"



    # - debug:
    #     msg: "{{ template_facts | json_query('results[*].instance.hw_power_status') }}"

#    - set_fact:
       # prova: "{{ template_facts | json_query('instance.hw_file%s[*]') }}"
#        prova: "{{ template_facts.instance.keys() | select('match', 'hw_f.*') | list }}"

#    - debug:
#        msg: "{{ prova }}"


    # - set_fact:
    #     vm_networks: "{{ vm_facts.instance.keys() | select('match', '.*eth.*') | list }}"

    # - debug:
    #     msg: "{{ vm_facts.instance[item].macaddress }}"
    #   loop: "{{ vm_networks }}"


   - name: Recupero informazioni/facts delle vm in una lista 
     vmware_guest_info:
       hostname: "{{ vcenter_server }}"
       username: "{{ vcenter_user }}"
       password: "{{ vcenter_pass }}"
       validate_certs: False
       datacenter: "{{ vcenter_datacenter }}"
       folder: "/{{ vcenter_datacenter }}/vm"
       name: "{{ inventory_hostname }}"
     register: template_facts
     delegate_to: localhost

   - set_fact:
       vm_folder: "{{ template_facts.instance.hw_folder }}"
       guest_os: "{{ template_facts.instance.hw_guest_full_name }}"

   - debug:
       msg: "{{ guest_os }}"
  #  - name: Find "{{ inventory_hostname }}" 's Folder 
  #    vmware_guest_find:
  #      hostname: "{{ vcenter_server }}"
  #      username: "{{ vcenter_user }}"
  #      password: "{{ vcenter_pass }}"
  #      validate_certs: no
  #      name: "{{ inventory_hostname }}"
  #    delegate_to: localhost
  #    register: vm_folder
   
   - include_role:
        name: clean_linux
     when: guest_os is search("Red Hat")

   - include_role:
        name: clean_windows
     when: guest_os is search("Windows")



  #  - name: Add Connection Plugin vmware
  #    add_host:
  #      name: my_vmware
  #      ansible_connection: vmware_tools
  #      ansible_vmware_host: "{{ vcenter_server }}"
  #      ansible_vmware_user: "{{ vcenter_user }}"
  #      ansible_vmware_password: "{{ vcenter_pass }}"
  #      ansible_vmware_validate_certs: no
  #      ansible_vmware_guest_path: "{{ vm_folder.folders[0] }}/{{ inventory_hostname }}"
  #      ansible_vmware_tools_user: root
  #      ansible_vmware_tools_password: C4mb14m1!

  #  - name: Example command via vmtools
  #    delegate_to: my_vmware
  #    command: ls -l 
  #    register: cmdout

  #  - debug:
  #      msg: "{{ cmdout }}"

  #  - name:  test annotation
  #    vmware_guest:
  #      hostname: "{{ vcenter_server }}"
  #      username: "{{ vcenter_user }}"
  #      password: "{{ vcenter_pass }}"
  #      datacenter: "{{ vcenter_datacenter }}"
  #      validate_certs: no
  #      name: "{{ inventory_hostname }}"
  #      annotation: "{{ note_update }} \n {{ template_facts.instance.annotation }}"
  #    delegate_to: localhost

