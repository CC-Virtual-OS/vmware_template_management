---
- name: Find folder path of an existing virtual machine
  hosts: linux
  gather_facts: False
  vars:
    # ansible_python_interpreter: "/usr/bin/env python3"
    bkp_template_name: "{{ inventory_hostname }}-19102020-15-14"

  tasks:
    - name: Recupero informazioni/facts del vecchio template
      vmware_guest_info:
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_pass }}"
        validate_certs: False
        datacenter: "{{ vcenter_datacenter }}"
        folder: "/{{ vcenter_datacenter }}/vm"
        name: "{{ inventory_hostname }}"
      register: template_facts
      delegate_to: localhost

    - set_fact:
        folder: "{{ template_facts.instance.hw_folder }}"
        guest_os: "{{ template_facts.instance.hw_guest_full_name }}"

    # - name: Get Template Facts
    #   vmware_guest_info:
    #     hostname: "{{ vcenter_server }}"
    #     username: "{{ vcenter_user }}"
    #     password: "{{ vcenter_pass }}"
    #     validate_certs: False
    #     datacenter: "{{ vcenter_datacenter }}"
    #     folder: "{{ folder }}"
    #     name: "{{ inventory_hostname }}"
    #   delegate_to: localhost
    #   register: template_facts

    - name: Rename "{{ inventory_hostname }}" to "{{ bkp_template_name }}"
      vmware_guest:
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_pass }}"
        datacenter: "{{ vcenter_datacenter }}"
        validate_certs: False
        cluster: "{{ cluster_name }}"
        uuid: "{{ template_facts.instance.hw_product_uuid }}"
        name: "{{ bkp_template_name }}"
      delegate_to: localhost


    - name: Cloning VM Template 
      vmware_guest:
        hostname: "{{ vcenter_server }}" 
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_pass }}" 
        validate_certs: False
        name: "{{ new_name }}"
        template: "{{ vm_on_name }}" 
        datacenter: "{{ vcenter_datacenter }}"
        folder: "{{ folder }}"
        cluster: "{{ cluster_name }}"
        datastore: "{{ datastore_name }}"
        state: poweredoff
      delegate_to: localhost
      register: vm_facts 
       
    - name: remove all NICs from new template 
      vmware_guest_network:
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_pass }}"
        datacenter: "{{ vcenter_datacenter }}"
        validate_certs: no
        name: "{{ new_name }}"
        cluster: "{{ cluster_name }}"
        gather_network_info: false
        networks:
         - state: absent
           device_type: "vmxnet3"
      delegate_to: localhost

    - name: Power On the new template "{{ inventory_hostname }}"
      vmware_guest:
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_pass }}"
        datacenter: "{{ vcenter_datacenter }}"
        validate_certs: no
        name: "{{ new_name }}"
        state: poweredon
      delegate_to: localhost

    - name: Wait for VMware tools to become available
      vmware_guest_tools_wait:
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_pass }}"
        validate_certs: no
        name: "{{ new_name }}"
        folder: "{{ folder }}"
      delegate_to: localhost
      register: facts

    - name: pause 30 seconds
      pause:
        seconds: 30

    - name: Recupero informazioni della vm 
      vmware_guest_info:
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_pass }}"
        validate_certs: False
        datacenter: "{{ vcenter_datacenter }}"
        folder: "/{{ vcenter_datacenter }}/vm"
        name: "{{ new_name }}"
      register: new_template_facts
      delegate_to: localhost

    - set_fact:
        guest_os: "{{ new_template_facts.instance.hw_guest_full_name }}"

    - debug:
        msg: "{{ guest_os }}"


    - include_role:
         name: clean_linux
      when: guest_os is search("Red Hat") or guest_os is search("CentOS")

    - include_role:
         name: clean_windows
      when: guest_os is search("Windows")

### Spengo la vm 
    - name: Poweroff vm
      vmware_guest:
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_pass }}"
        datacenter: "{{ vcenter_datacenter }}"
        validate_certs: no
        name: "{{ new_name }}"
        state: poweredoff
      delegate_to: localhost

### converto la vm in template e scrivo le note
    - name:  convert to template
      vmware_guest:
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_pass }}"
        datacenter: "{{ vcenter_datacenter }}"
        validate_certs: no
        name: "{{ new_name }}"
        is_template: true
        annotation: "{{ note_update }} \n {{ template_facts.instance.annotation }}"
      delegate_to: localhost

      


